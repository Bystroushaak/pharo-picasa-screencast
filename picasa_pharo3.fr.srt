1
00:00:03,000 --> 00:00:05,180
Cette vidéo montre

2
00:00:05,280 --> 00:00:09,060
comment récupérer des photos depuis Picasa
en utilisant l'API REST / XML

3
00:00:09,140 --> 00:00:15,990
Puis comment construire à la fois une application bureau 
et une page web servie par Pharo
pour afficher les images.

4
00:00:16,390 --> 00:00:19,390
On ouvre le menu principal (World menu)
en cliquant sur le fond.

5
00:00:20,000 --> 00:00:24,390
J'augmente la taille des polices
pour améliorer la lisibilité

6
00:00:24,690 --> 00:00:28,490
via les préférences (Settings Browser).

7
00:00:32,480 --> 00:00:35,080
Picasa fournit une API RESTful pour 
chercher les photos

8
00:00:35,180 --> 00:00:37,080
et retourne une réponse sous forme
de document XML.

9
00:00:37,180 --> 00:00:40,680
Copiez l'URL fournie et collez là
dans un workspace.

10
00:00:41,280 --> 00:00:43,670
Un workspace permet d'évaluer
dynamiquement du code Smalltalk.

11
00:00:43,770 --> 00:00:47,270
Cherchons par exemple cinq
photos de phares (lighthouse).

12
00:00:50,550 --> 00:00:52,550
ZnClient permet de construire et d'exécuter
des requêtes HTTP.

13
00:00:52,860 --> 00:00:54,860
Le flux XML est correctement
téléchargé

14
00:00:54,250 --> 00:00:56,750
mais n'est pas facile à examiner
en tant que chaîne brute.

15
00:00:56,250 --> 00:00:58,750
Pharo n'est pas livré
avec un parseur XML, 

16
00:00:58,250 --> 00:01:01,810
mais on peut en installer
un via le Configuration Browser.

17
00:01:01,910 --> 00:01:03,910
Il permet de charger des configurations
Metacello

18
00:01:02,910 --> 00:01:04,910
qui décrivent des groupes de
paquets avec leurs dépendances

19
00:01:03,910 --> 00:01:05,910
pour chaque version de Pharo.

20
00:01:06,650 --> 00:01:08,650
Ceci fait, la classe XMLDOMParser
est disponible

21
00:01:08,750 --> 00:01:10,750
et nous pouvons l'utiliser pour
parser le flux XML.

22
00:01:19,946 --> 00:01:21,946
Pharo fournit des outils de
débogage avancés.

23
00:01:22,046 --> 00:01:24,046
Via l'Explorer, nous pouvons
naviguer à travers le graphe d'objets,

24
00:01:23,046 --> 00:01:26,883
ce qui permet de facilement inspecter
la hiérarchie des noeuds XML!

25
00:01:26,883 --> 00:01:28,883
Chaque photo est décrite
dans une balise <entry>

26
00:01:28,983 --> 00:01:32,983
qui elle-même contient le titre
dans une balise <title>

27
00:01:33,083 --> 00:01:38,083
et l'URL de la photo dans l'attribut
src de la balise <content>

28
00:01:39,941 --> 00:01:43,941
La classe de chaque objet est
accessible depuis l'inspecteur

29
00:01:44,041 --> 00:01:46,041
en utilisant l'entrée de menu
Browse Class.

30
00:01:46,496 --> 00:01:49,496
Le navigateur par défaut
s'appelle Nautilus.

31
00:01:49,596 --> 00:01:53,496
Il fournit un large ensemble
d'outis pour parcourir et modifier les classes.

32
00:01:55,596 --> 00:01:58,596
Nous pouvons évaluer dynamiquement
du code Smalltalk

33
00:01:58,696 --> 00:02:00,696
dans le contexte de l'Explorer.

34
00:02:00,645 --> 00:02:02,645
Depuis la racine du document XML

35
00:02:02,745 --> 00:02:04,745
nous pouvons extraire
tous les noeuds enfants

36
00:02:04,845 --> 00:02:06,845
nommés entry.

37
00:02:23,893 --> 00:02:26,893
self est initialisé à l'objet

38
00:02:26,993 --> 00:02:28,993
sélectionné dans l'explorer.

39
00:02:29,093 --> 00:02:33,093
Ici self est l'object qui détient
l'élément title.

40
00:02:36,552 --> 00:02:40,452
Maintenant self est
l'élément entry.

41
00:02:46,351 --> 00:02:50,251
Et maintenant self est
la racine du document XML.

42
00:02:52,546 --> 00:02:56,546
Ici nous récupérons le contenu
de toutes les balises <title> dans un tableau !

43
00:03:03,170 --> 00:03:07,070
Faisons de même pour récupérer
toutes les URLs des photos.

44
00:03:26,480 --> 00:03:30,480
Je veux stocker les titre et URL de chaque
photo dans un objet PicasaPhoto

45
00:03:30,580 --> 00:03:34,480
en utilisant les messages 
title: et url:.

46
00:03:45,580 --> 00:03:50,480
PicasaPhoto n'existe pas.

47
00:03:50,580 --> 00:03:55,480
Mais Pharo est un environnement
vivant

48
00:03:55,580 --> 00:03:59,480
et peut créer la classe à
la volée!

49
00:04:04,503 --> 00:04:08,403
PicasaPhoto sera rangée
dans une nouvelle catégorie Picasa.

50
00:04:08,503 --> 00:04:12,403
Voilà! Maintenant Pharo ouvre un débogueur
car la méthode title: n'existe pas.

51
00:04:12,503 --> 00:04:16,403
De même, Pharo peut la créer pour nous!

52
00:04:16,503 --> 00:04:20,403
Les méthodes sont regroupées
en protocoles pour faciliter la navigation.

53
00:04:21,426 --> 00:04:25,426
Votre nom permet de tracer les auteurs
des modifications comme dans un
sytème de contrôle de versions.

54
00:04:25,526 --> 00:04:29,526
Implémentez la méthode directement dans
le débogueur sans stopper l'évaluation!

55
00:04:29,626 --> 00:04:33,626
Pharo détecte aussi les variables manquantes
et le ajoute si vous le désirer.

56
00:04:33,726 --> 00:04:37,726
PicasaPhoto>>title: est créé, vous
pouvez la visualiser!

57
00:04:56,732 --> 00:05:00,732
Voilà. Nous appelons cela:
Développement piloté par le débogueur.

58
00:05:00,832 --> 00:05:04,832
Il suffit d'inspecter, manipuler les objets
et laisse Pharo vous assister pour aller plus vite.

59
00:05:06,209 --> 00:05:11,209
Déplaçons ensuite ce code dans
une nouvelle classe Picasa

60
00:05:11,309 --> 00:05:16,309
avec une méthode searchFor: côté classe.

61
00:05:51,852 --> 00:05:55,852
Le message , (virgule) permet
de concaténer deux collections.

62
00:05:55,509 --> 00:05:59,509
(un objet String est une Collection
d'objects Character)

63
00:06:10,895 --> 00:06:14,895
Je voudrais ensuite déléguer l'implémentation
de searchFor: à l'instance.

64
00:06:14,995 --> 00:06:18,995
Pharo fournit de puissants outils de
refactoring qui nous aide à le faire.

65
00:06:37,766 --> 00:06:41,766
L'entrée de menu Format réarrange
automatiquement le code pour suivre
les conventions.

66
00:06:45,144 --> 00:06:49,144
Extrayons ensuite ce code
dans une nouvelle méthode

67
00:06:49,244 --> 00:06:53,244
en utilisant le refactoring
Extract method.

68
00:07:04,751 --> 00:07:08,751
Supprimons enfin la variable content
via le refactoring Inline temporary.

69
00:07:08,851 --> 00:07:10,851
La recherche basique sur Picasa
fonctionne.

70
00:07:18,465 --> 00:07:21,465
Maintenant affichons les photos
dans une fenêtre Morphic.

71
00:07:21,051 --> 00:07:24,051
Morphic est le système
graphique utilisé par Pharo.

72
00:07:24,151 --> 00:07:27,151
Les builders UITheme et Polymorph utilisent
Morphic

73
00:07:27,251 --> 00:07:30,251
et permetter de créer des
applications graphiques facilement.

74
00:07:30,351 --> 00:07:35,251
<i>TEasilyThemed>>newRow:</i> et <i>newColumn:</i>
placent les morphs horizontalement et verticalement.

75
00:08:00,123 --> 00:08:04,123
PicasaPhoto>>imageMorph devra télécharger
les photos depuis Picasa.

76
00:08:04,223 --> 00:08:09,223
De nouveau, le framework Zinc fourni
des classes pratiques pour faciliter la tâche.

77
00:08:15,232 --> 00:08:20,232
Puis la méthode retourne un objet Morph
qui permet d'afficher la photo dans une fenêtre.

78
00:08:25,271 --> 00:08:28,271
Joli, non?

79
00:08:28,371 --> 00:08:33,371
Mais cela serait mieux avec
des barres de défilement (scrollbars).

80
00:08:40,159 --> 00:08:44,159
Je change la politique de placement
pour un "TableLayout"

81
00:08:44,259 --> 00:08:48,259
qui permet de placer automatiquement
les sous-morphs horizontalement.

82
00:08:55,626 --> 00:08:59,626
Je change la taille de la fenêtre
pour 600px par 600px

83
00:09:03,683 --> 00:09:07,683
Erreur de syntaxe :(

84
00:09:16,271 --> 00:09:20,271
Pour finir, j'ajout le titre de
chaque image en dessous

85
00:09:19,883 --> 00:09:23,883
en entourant chaque image et son
titre dans une colonne.

86
00:09:35,353 --> 00:09:39,353
PicasaPhoto>>title n'existe pas encore.

87
00:09:39,453 --> 00:09:43,453
Voyez comment Pharo propose une
implémentation par défaut.

88
00:09:47,322 --> 00:09:50,322
Fini.

89
00:09:52,599 --> 00:09:56,599
La dernière partie de ce tutoriel 
montre comment créer une page web

90
00:09:56,699 --> 00:10:00,699
qui affichera le résultat de
la recherche Picasa

91
00:10:00,799 --> 00:10:04,799
en utilisant les composants
fournis par Zinc HTTP.

92
00:10:15,874 --> 00:10:19,874
Nous pouvons créer
un application web

93
00:10:19,974 --> 00:10:24,974
en implémentant la méthode value:
dans une classe

94
00:10:50,904 --> 00:10:54,904
puis en associant un sous-chemin
à une instance de cette classe

95
00:10:55,004 --> 00:10:59,004
un utilisant
ZnDefaultServerDelegate>>map:to:

96
00:11:19,366 --> 00:11:23,366
L'argument aRequest est un
objet ZnRequest

97
00:11:23,404 --> 00:11:27,404
et le message uri retourne
un objet ZnUrl

98
00:11:27,404 --> 00:11:31,404
qui permet de parser
la requête.

99
00:11:31,504 --> 00:11:35,504
Je récupère le paramètre s d'une url comme:
http://localhost:8080/picasa?s=lighthouse

100
00:11:51,711 --> 00:11:55,711
Maintenant implémentons une méthode
qui construit la réponse HTML

101
00:11:55,811 --> 00:11:59,811
à la manière du développement
piloté par le débogueur.

102
00:12:01,925 --> 00:12:05,925
Par défaut ZnServer désactive le
débogueur pour un usage en production.

103
00:12:06,025 --> 00:12:10,025
Nous pouvons le réactiver via la
message debugMode:

104
00:12:10,125 --> 00:12:14,125
Nous pouvons maintenant implémenter
les méthodes manquantes de même que
précédemment!

105
00:12:38,831 --> 00:12:42,831
String>>streamContents: permet de construire
un String via un objet TextStream

106
00:12:43,325 --> 00:12:48,325
qui offre de meilleures performances ue
concaténer plusieurs chaînes dans une seule.

107
00:12:55,288 --> 00:13:00,288
Chaque titre et photo seront affichées
via des balises HTML <ul> et <li>.

108
00:13:48,368 --> 00:13:52,368
Notez que le navigateur web est toujours
en attente de la réponse

109
00:13:52,468 --> 00:13:56,468
pendant que nous implémentons
les méthodes dans le débogueur.

110
00:13:56,568 --> 00:14:00,568
Il n'y a donc pas besoin de rafraîchir
la page aprés avoir cliqué sur Proceed!

111
00:14:09,779 --> 00:14:14,779
Prenez du plaisir avec Pharo!

