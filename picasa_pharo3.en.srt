1
00:00:03,000 --> 00:00:05,180
This video shows

2
00:00:05,180 --> 00:00:07,180
how to get pictures from Picasa

3
00:00:07,160 --> 00:00:09,160
though its REST API and XML feed.

4
00:00:09,140 --> 00:00:11,140
Then how to build both a desktop application

5
00:00:11,120 --> 00:00:13,120
and a web page served by Pharo itself

6
00:00:13,100 --> 00:00:16,290
to display them.

7
00:00:16,390 --> 00:00:18,390
The main (World) menu is opened

8
00:00:17,390 --> 00:00:19,390
by clicking on the background.

9
00:00:20,000 --> 00:00:22,290
For more readability

10
00:00:22,390 --> 00:00:24,390
I increase the font size

11
00:00:23,390 --> 00:00:25,390
through the Settings Browser.

12
00:00:32,480 --> 00:00:34,480
Picasa provides a RESTful API

13
00:00:34,080 --> 00:00:36,080
through which we can search for photos

14
00:00:35,080 --> 00:00:37,080
and get the result as a XML document.

15
00:00:36,080 --> 00:00:38,680
Just copy the provided URL

16
00:00:38,680 --> 00:00:40,680
and paste it into a Pharo workspace.

17
00:00:41,280 --> 00:00:43,670
A workspace is used to dynamically evaluate some Smalltalk code.

18
00:00:43,770 --> 00:00:47,270
Let's search for five photos of lighthouses.

19
00:00:50,550 --> 00:00:52,550
ZnClient allows to build, execute and process HTTP requests

20
00:00:52,860 --> 00:00:54,860
The XML feed is successfully retrieved

21
00:00:54,250 --> 00:00:56,750
but it's not easy to examine it as a raw string.

22
00:00:56,250 --> 00:00:58,750
Pharo doesn't come with a XML parser,

23
00:00:58,250 --> 00:01:01,810
but we can install one easily thanks to the Configuration Browser.

24
00:01:01,910 --> 00:01:03,910
Configuration Browser allows to install Metacello configurations,

25
00:01:02,910 --> 00:01:04,910
which describe groups of packages and their dependencies

26
00:01:03,910 --> 00:01:05,910
for each version of Pharo.

27
00:01:06,650 --> 00:01:08,650
Once done, the XMLDOMParser class is loaded into Pharo

28
00:01:08,750 --> 00:01:10,750
and we can use it to parse the XML feed.

29
00:01:19,946 --> 00:01:21,946
Pharo comes with awesome debugging tools.

30
00:01:22,046 --> 00:01:24,046
Using the Explorer, we can browse the entire object graph

31
00:01:23,046 --> 00:01:26,883
which makes it easy to inspect the hierarchy of XML nodes !

32
00:01:26,883 --> 00:01:28,883
Each photo is described in an <i>entry</i> tag

33
00:01:28,983 --> 00:01:32,983
wich itself contains a self-explaining <i>title</i> tag

34
00:01:33,083 --> 00:01:38,083
and the URL in the <i>src</i> attribute of a <i>content</i> tag

35
00:01:39,941 --> 00:01:43,941
From the inspector you can access the class of every object

36
00:01:44,041 --> 00:01:46,041
using the <i>Browse Class</i> menu entry.

37
00:01:46,496 --> 00:01:49,496
The default class browser is named <i>Nautilus</i>.

38
00:01:49,596 --> 00:01:53,496
It offers a large range of tools to browse and modify classes.

39
00:01:55,596 --> 00:01:58,596
We can dynamically evaluate some Smalltalk code

40
00:01:58,696 --> 00:02:00,696
in the context of the explorer.

41
00:02:00,645 --> 00:02:02,645
From the root node of the XML document

42
00:02:02,745 --> 00:02:04,745
we can retrieve all children nodes

43
00:02:04,845 --> 00:02:06,845
that are named <i>entry</i>.

44
00:02:23,893 --> 00:02:26,893
<i><b>self</b></i> is bound to the object

45
00:02:26,993 --> 00:02:28,993
that is selected in the explorer.

46
00:02:29,093 --> 00:02:33,093
Here <b>self</b> is the objet that holds the <i>title</i> element.

47
00:02:36,552 --> 00:02:40,452
Now it's the <i>entry</i> element.

48
00:02:46,351 --> 00:02:50,251
And now the root node of the XML document.

49
00:02:52,546 --> 00:02:56,546
Here we get the content of all <i>title</i> tags in an array !

50
00:03:03,170 --> 00:03:07,070
Let's something similar to get all the photos URLs.

51
00:03:26,480 --> 00:03:30,480
I want to store title and URL for each photo in a PicasaPhoto object

52
00:03:30,580 --> 00:03:34,480
using <i>title:</i> and <i>url:</i> messages.

53
00:03:45,580 --> 00:03:50,480
PicasaPhoto doesn't exist yet.

54
00:03:50,580 --> 00:03:55,480
But remember Pharo is a live environment

55
00:03:55,580 --> 00:03:59,480
and can create it on the fly !

56
00:04:04,503 --> 00:04:08,403
<i>PicasaPhoto</i> will be stored in a new category named <i>Picasa</i>.

57
00:04:08,503 --> 00:04:12,403
Done ! But now Pharo opens a debugger 
because <i>title:</i> method doesn't exist.

58
00:04:12,503 --> 00:04:16,403
Again, Pharo can create it for us !

59
00:04:16,503 --> 00:04:20,403
Methods are grouped into protocols 
for easier method browsing

60
00:04:21,426 --> 00:04:25,426
Your name will be used to track authors of changes 
like in a version control system.

61
00:04:25,526 --> 00:04:29,526
Implement the method directly in debugger 
without stopping the evaluation !

62
00:04:29,626 --> 00:04:33,626
Pharo also automatically detect missing variables 
and add them when you choose to

63
00:04:33,726 --> 00:04:37,726
PicasaPhoto>>title: is here, 
you can browse it !

64
00:04:56,732 --> 00:05:00,732
Done. We call that:
<i><b>Debugger driven development</b></i>

65
00:05:00,832 --> 00:05:04,832
Just inspect, manipulate objects and
let Pharo help you going faster

66
00:05:06,209 --> 00:05:11,209
Now let's move this code into
a new <i>Picasa</i> class

67
00:05:11,309 --> 00:05:16,309
with a <b>class-side</b> method named
<i>searchFor:</i>

68
00:05:51,852 --> 00:05:55,852
The <i><b>,</b></i> (comma) message is used to
concatenate two collections

69
00:05:55,509 --> 00:05:59,509
and remember <i>String</i> objects are 
collections of <i>Character</i> objects

70
00:06:10,895 --> 00:06:14,895
I would like to delegate the implementation 
of <i>searchFor:</i> to instance side.

71
00:06:14,995 --> 00:06:18,995
Pharo comes with powerful refactoring tools
that help me do that

72
00:06:37,766 --> 00:06:41,766
<i>Format</i> menu entry is used to rearrange
code automatically to follow the conventions

73
00:06:45,144 --> 00:06:49,144
Let's extract this code into a new method

74
00:06:49,244 --> 00:06:53,244
using <i>Extract method</i> refactoring

75
00:07:04,751 --> 00:07:08,751
And inline the <i>content</i> variable in 
order to remove it.

76
00:07:08,851 --> 00:07:10,851
The Picasa basic search is working.

77
00:07:18,465 --> 00:07:21,465
Now let's display the photos
in a <i>Morphic</i> window.

78
00:07:21,051 --> 00:07:24,051
<i>Morphic</i> is the graphic system
used in Pharo.

79
00:07:24,151 --> 00:07:27,151
On top of <i>Morphic</i>, <i>UITheme</i> and 
<i>Polymorph</i> builders allows to

80
00:07:27,251 --> 00:07:30,251
easily build graphical applications.

81
00:07:30,351 --> 00:07:35,251
<i>TEasilyThemed>>newRow:</i> and <i>newColumn:</i>
arrange morphs horizontally and vertically.

82
00:08:00,123 --> 00:08:04,123
<i>PicasaPhoto>>imageMorph</i> will have to 
download the photo from Picasa.

83
00:08:04,223 --> 00:08:09,223
Again, Zinc HTTP framework comes 
with useful classes to make this easy.

84
00:08:15,232 --> 00:08:20,232
Then it answers a <i>Morph</i> object from the photo 
to be displayed in the morphic window

85
00:08:25,271 --> 00:08:28,271
Nice :)

86
00:08:28,371 --> 00:08:33,371
But it would be better
with scrollbars.

87
00:08:40,159 --> 00:08:44,159
I change the scroller layout policy to a table layout

88
00:08:44,259 --> 00:08:48,259
so its submorphs (here <i>content</i>) will be
automatically placed horizontally.

89
00:08:55,626 --> 00:08:59,626
I would like the size of the window
to be 600px by 600px

90
00:09:03,683 --> 00:09:07,683
Oups, syntax error ...

91
00:09:16,271 --> 00:09:20,271
Finally I will add the title of each
image below.

92
00:09:19,883 --> 00:09:23,883
A way is to wrap each image and title in
a column.

93
00:09:35,353 --> 00:09:39,353
<i>PicasaPhoto>>title</i> does not exists yet.

94
00:09:39,453 --> 00:09:43,453
See how Pharo proposes a default implementation.

